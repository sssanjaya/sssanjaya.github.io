# Project template
# - layout: top-middle
#   name: Two Way Screen Mirror & Controll
#   link: https://github.com/sssanjaya/two-way-screen-mirror-control
#   github: https://github.com/sssanjaya/two-way-screen-mirror-control
#   quote: >
#     Building library for android/linux screen mirroring with both way control on intranet with <mark>libav</mark> <mark>sdl2</mark> <mark>ffmpeg</mark>
  # description: | # this will include new lines to allow paragraphs
  #   Building library for android screen mirroring with both way control

- layout: top-middle
  name: My portfolio on github
  link: https://github.com/sssanjaya/sssanjaya.github.io
  github: https://github.com/sssanjaya/sssanjaya.github.io
  quote: >
    This project is inspired by [sproogen](https://github.com/sproogen/modern-resume-theme) 
  # description: | 

- layout: top-middle
  name: Devsecops-dashboard
  link: https://github.com/sssanjaya/devsecops-dashboard
  github: https://github.com/sssanjaya/devsecops-dashboard
  quote: >
    DevSecOps Dashboard for Monitoring and Alerting
  description: > 
    Build a web-based dashboard that aggregates and displays key metrics from your CI/CD pipeline, infrastructure, and application security scans. The dashboard will provide real-time insights into the health, performance, and security of your infrastructure and applications.
    
    Objective:

    Build a web-based dashboard that aggregates and displays key metrics from your CI/CD pipeline, infrastructure, and application security scans. The dashboard will provide real-time insights into the health, performance, and security of your infrastructure and applications.

    Key Features:

      1.	CI/CD Pipeline Monitoring:
      •	Display the status of recent builds, tests, and deployments.
      •	Integrate with GitHub Actions/GitLab CI to show real-time build logs, test results, and deployment history.
      2.	Security Scan Results:
      •	Show results from static code analysis tools (e.g., Bandit) and infrastructure security checks (e.g., Checkov).
      •	Highlight any vulnerabilities or issues that need attention.
      3.	Infrastructure Health:
      •	Monitor infrastructure resources (e.g., CPU, memory usage) via Prometheus and Grafana.
      •	Provide insights on network security, such as open ports and traffic patterns.
      4.	Alerting System:
      •	Set up alerts for critical issues such as failed deployments, high CPU usage, or detected vulnerabilities.
      •	Integrate with Slack, email, or other notification systems for real-time alerts.
      5.	User Access and Security:
      •	Implement role-based access control (RBAC) for different user levels (e.g., admin, developer, viewer).
      •	Secure the dashboard using best practices (e.g., HTTPS, secure authentication).

    Tech Stack:

      •	Frontend: Python Flask or Django for the web framework.
      •	Backend: Python for API development, along with necessary libraries for security scans.
      •	Database: PostgreSQL or SQLite for storing logs, scan results, and metrics.
      •	CI/CD: GitHub Actions or GitLab CI for building, testing, and deploying the dashboard.
      •	Infrastructure: Terraform for setting up cloud resources, Docker for containerization.
      •	Continuous Deployment: ArgoCD for managing Kubernetes deployments.
      •	Monitoring: Prometheus for metrics collection, Grafana for visualization.
      •	Security: Bandit, Checkov, and other security tools integrated into the pipeline.
    